require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe GroupsController do
  before(:each) do
    session[:username]   = 'joeuser'
    session[:password]   = 'password'
    session[:account_id] = '100'
    
    mock_root = mock_model(Group)
    Group.stub(:root).with(no_args()).and_return(mock_root)
    @mock_event = mock_model(Event, :group_id => 1)
    Event.stub(:find).with(any_args()).and_return(@mock_event)
    @mock_event.stub(:location).with(no_args()).and_return(nil)
  end

  def mock_group(stubs={})
    @mock_group ||= mock_model(Group, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all groups as @groups" do
      Group.stub(:all) { [mock_group] }
      get :index
      assigns(:groups).should eq([mock_group])
    end
  end

  describe "GET show" do
    it "assigns the requested group as @group" do
      Group.stub(:find).with("37") { mock_group }
      get :show, :id => "37"
      assigns(:group).should be(mock_group)
    end
  end

  describe "GET new" do
    it "assigns a new group as @group" do
      Group.stub(:new) { mock_group }
      get :new
      assigns(:group).should be(mock_group)
    end
  end

  describe "GET new with id" do
    it "assigns a new group as @group" do
      Group.stub(:new) { mock_group }
      Group.stub(:find).with("37") { mock_model(Group).as_null_object }
      get :new, :id => "37"
      assigns(:group).should be(mock_group)
    end
    
    it "assigns requested parent as @parent" do
      Group.stub(:new) { mock_model(Group).as_null_object }
      Group.stub(:find).with("37") { mock_group }
      get :new, :id => "37"
      assigns(:parent).should be(mock_group)
    end
  end

  describe "GET edit" do
    it "assigns the requested group as @group" do
      Group.stub(:find).with("37") { mock_group }
      get :edit, :id => "37"
      assigns(:group).should be(mock_group)
    end
  end

  describe "POST create" do
    # The controller will try to look up the parent group, so have the
    # "find" class method return a mock object when searched for id=0.
    before(:each) do
        Group.stub(:find).with(0) { mock_group }
    end
    
    describe "after Cancel button press" do
      it "should redirect to the event edit form"
    end
      
    describe "with valid params" do
      it "assigns a newly created group as @group" do
        Group.stub(:new).with({'these' => 'params'}) { mock_group(:save => true) }
        post :create, :group => {'these' => 'params'}
        assigns(:group).should be(mock_group)
      end

      it "redirects to the created group" do
        Group.stub(:new) { mock_group(:save => true) }
        post :create, :group => {}
        response.should redirect_to(edit_event_url(@mock_event))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved group as @group" do
        Group.stub(:new).with({'these' => 'params'}) { mock_group(:save => false) }
        post :create, :group => {'these' => 'params'}
        assigns(:group).should be(mock_group)
      end

      it "re-renders the 'new' template" do
        Group.stub(:new) { mock_group(:save => false) }
        post :create, :group => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "after Cancel button pressed" do
      it "should redirect to the event edit form"
    end
    
    describe "with valid params" do
      it "updates the requested group" do
        Group.stub(:find).with("37") { mock_group }
        mock_group.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :group => {'these' => 'params'}
      end

      it "assigns the requested group as @group" do
        Group.stub(:find) { mock_group(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:group).should be(mock_group)
      end

      it "redirects to the group" do
        Group.stub(:find) { mock_group(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(edit_event_url(@mock_event))
      end
    end

    describe "with invalid params" do
      it "assigns the group as @group" do
        Group.stub(:find) { mock_group(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:group).should be(mock_group)
      end

      it "re-renders the 'edit' template" do
        Group.stub(:find) { mock_group(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested group" do
      Group.stub(:find).with("37") { mock_group }
      mock_group.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the groups list" do
      Group.stub(:find) { mock_group }
      delete :destroy, :id => "1"
      response.should redirect_to(edit_event_url(@mock_event))
    end
  end

  describe "POST disambiguate" do
    describe "with parent_id" do
      describe "with commit=New" do
        it "redirects to the new child form" do
          post :disambiguate, :commit => 'New', :group => {'parent_id' => "37"}
          response.should redirect_to("/groups/37/new")
        end
      end
      
      describe "with commit=Edit" do
        it "redirects to the edit form"        
      end
      
      describe "with commit=Delete" do
        it "calls the destroy method"
      end
    end
    
    describe "without parent_id" do
      describe "with commit=New" do
        it "redirects to the new group form (top-level)" do
          post :disambiguate, :commit => 'New'
          response.should redirect_to(new_group_url)
        end
      end
      
      describe "with commit=Edit" do
        it "displays an error"
      end
      
      describe "with commit=Delete" do
        it "displays an error"
      end
    end
  end
end
